UN NODO QUE SE SUSCRIBE A CONTROLNODE Y PUBLICA COSAS USANDO EL MAPA (SIN PERFECCIONAR,
ES UN EJEMPLO)

1. Hay que poner esto (más o menos) en el controlNode:

rclcpp::Publisher<geometry_msgs::msg::PoseStamped>::SharedPtr objetivo_pub_;
// en el constructor:
objetivo_pub_ = this->create_publisher<geometry_msgs::msg::PoseStamped>("person_position", 10);

// en seguir():
if (detected_) {
  geometry_msgs::msg::PoseStamped pose;
  pose.header.frame_id = "map"; // o "base_footprint" si quieres transformarlo después
  pose.header.stamp = now();
  pose.pose.position.x = atrx;
  pose.pose.position.y = atry;
  pose.pose.orientation.w = 1.0;
  objetivo_pub_->publish(pose);
}

Creamos un Nodo NavClientNode.cpp que se suscriba al controler y opere con el mapa

#include "rclcpp/rclcpp.hpp"
#include "geometry_msgs/msg/pose_stamped.hpp"
#include "rclcpp_action/rclcpp_action.hpp"
#include "nav2_msgs/action/navigate_to_pose.hpp"

using namespace std::chrono_literals;

class NavClientNode : public rclcpp::Node
{
public:
  using NavigateToPose = nav2_msgs::action::NavigateToPose;
  using GoalHandle = rclcpp_action::ClientGoalHandle<NavigateToPose>;

  NavClientNode() : Node("nav_client_node")
  {
    nav_client_ = rclcpp_action::create_client<NavigateToPose>(this, "navigate_to_pose");

    pose_sub_ = this->create_subscription<geometry_msgs::msg::PoseStamped>(
      "person_position", 10,
      std::bind(&NavClientNode::pose_callback, this, std::placeholders::_1));
  }

private:
  rclcpp_action::Client<NavigateToPose>::SharedPtr nav_client_;
  rclcpp::Subscription<geometry_msgs::msg::PoseStamped>::SharedPtr pose_sub_;

  void pose_callback(const geometry_msgs::msg::PoseStamped::SharedPtr msg)
  {
    if (!nav_client_->wait_for_action_server(5s)) {
      RCLCPP_ERROR(this->get_logger(), "Nav2 no está listo.");
      return;
    }

    auto goal_msg = NavigateToPose::Goal();
    goal_msg.pose = *msg;

    auto options = rclcpp_action::Client<NavigateToPose>::SendGoalOptions();
    options.result_callback = [this](const auto & result) {
      if (result.code == rclcpp_action::ResultCode::SUCCEEDED) {
        RCLCPP_INFO(this->get_logger(), "¡Objetivo alcanzado!");
      } else {
        RCLCPP_WARN(this->get_logger(), "Fallo al alcanzar objetivo");
      }
    };

    nav_client_->async_send_goal(goal_msg, options);
    RCLCPP_INFO(this->get_logger(), "Enviando robot a (%.2f, %.2f)",
                msg->pose.position.x, msg->pose.position.y);
  }
};

CMAKELIST:
add_executable(nav_client_node src/NavClientNode.cpp)
ament_target_dependencies(nav_client_node
  rclcpp
  rclcpp_action
  geometry_msgs
  nav2_msgs
)
install(TARGETS nav_client_node DESTINATION lib/${PROJECT_NAME})

PACKAGE.XML
<depend>rclcpp</depend>
<depend>geometry_msgs</depend>
<depend>nav2_msgs</depend>
<depend>rclcpp_action</depend>

